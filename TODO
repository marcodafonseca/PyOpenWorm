- Translate the below into Github issues
- Add a specialized command for saving DataObject classes defined in a source
file since: essentially this is equivalent to pow save 

- Make `pow dist load` that unpacks a dist created by `pow dist save`

- Have `pow dist load` specify any values in the 

- Describe in the documentation the repository, which verifies imported contexts
by downloading them or hashing them

- Describe in the documentation potential "value-added" features that a repo
may implement

- Describe the motivation of breaking a reliance on a chain-of-trust for the
total management of imports by the repository itself.

- Mention in the documentation that a repository of data may indeed use
multiple sources in an on-demand fashion and deploy a chain-of-trust as it
chooses

- Write a `pow source save` command as a special case of `pow data save` which 

- Make `pow source save` allow to save a directory tree with a user-selected
"data source directory saver" (e.g., a POWDataSourceDirectorySaver that saves

- Write a convenience function to both save a context and create a distribution
for that context in one go

- Make a component which accepts a context and generates a Python requirements
list from all Python class registry entries

- Note that a Python package must be installed in a fashion accessible to
pkg_resources in order to work with the requirements list feature

- Consider distribution schemes that package Python code together with the data

- Add a further specialization for saving data sources that either prompts for,
or accepts on the command line, the fields for the data source

- Write documentation describing the notion of the (current) data context and
(current) imports context

- Write (or reuse) a context accessor schema for acquiring RDF graphs from
(possibly remote) resources

- Allow to abbreviate names based on the context. Not necessarily prefixes
